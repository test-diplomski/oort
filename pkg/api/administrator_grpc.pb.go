// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: administrator.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OortAdministratorClient is the client API for OortAdministrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OortAdministratorClient interface {
	CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*AdministrationResp, error)
	DeleteResource(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*AdministrationResp, error)
	CreateInheritanceRel(ctx context.Context, in *CreateInheritanceRelReq, opts ...grpc.CallOption) (*AdministrationResp, error)
	DeleteInheritanceRel(ctx context.Context, in *DeleteInheritanceRelReq, opts ...grpc.CallOption) (*AdministrationResp, error)
	PutAttribute(ctx context.Context, in *PutAttributeReq, opts ...grpc.CallOption) (*AdministrationResp, error)
	DeleteAttribute(ctx context.Context, in *DeleteAttributeReq, opts ...grpc.CallOption) (*AdministrationResp, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*AdministrationResp, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*AdministrationResp, error)
}

type oortAdministratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOortAdministratorClient(cc grpc.ClientConnInterface) OortAdministratorClient {
	return &oortAdministratorClient{cc}
}

func (c *oortAdministratorClient) CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortAdministratorClient) DeleteResource(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortAdministratorClient) CreateInheritanceRel(ctx context.Context, in *CreateInheritanceRelReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/CreateInheritanceRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortAdministratorClient) DeleteInheritanceRel(ctx context.Context, in *DeleteInheritanceRelReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/DeleteInheritanceRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortAdministratorClient) PutAttribute(ctx context.Context, in *PutAttributeReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/PutAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortAdministratorClient) DeleteAttribute(ctx context.Context, in *DeleteAttributeReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/DeleteAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortAdministratorClient) CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortAdministratorClient) DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*AdministrationResp, error) {
	out := new(AdministrationResp)
	err := c.cc.Invoke(ctx, "/proto.OortAdministrator/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OortAdministratorServer is the server API for OortAdministrator service.
// All implementations must embed UnimplementedOortAdministratorServer
// for forward compatibility
type OortAdministratorServer interface {
	CreateResource(context.Context, *CreateResourceReq) (*AdministrationResp, error)
	DeleteResource(context.Context, *DeleteResourceReq) (*AdministrationResp, error)
	CreateInheritanceRel(context.Context, *CreateInheritanceRelReq) (*AdministrationResp, error)
	DeleteInheritanceRel(context.Context, *DeleteInheritanceRelReq) (*AdministrationResp, error)
	PutAttribute(context.Context, *PutAttributeReq) (*AdministrationResp, error)
	DeleteAttribute(context.Context, *DeleteAttributeReq) (*AdministrationResp, error)
	CreatePolicy(context.Context, *CreatePolicyReq) (*AdministrationResp, error)
	DeletePolicy(context.Context, *DeletePolicyReq) (*AdministrationResp, error)
	mustEmbedUnimplementedOortAdministratorServer()
}

// UnimplementedOortAdministratorServer must be embedded to have forward compatible implementations.
type UnimplementedOortAdministratorServer struct {
}

func (UnimplementedOortAdministratorServer) CreateResource(context.Context, *CreateResourceReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedOortAdministratorServer) DeleteResource(context.Context, *DeleteResourceReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedOortAdministratorServer) CreateInheritanceRel(context.Context, *CreateInheritanceRelReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInheritanceRel not implemented")
}
func (UnimplementedOortAdministratorServer) DeleteInheritanceRel(context.Context, *DeleteInheritanceRelReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInheritanceRel not implemented")
}
func (UnimplementedOortAdministratorServer) PutAttribute(context.Context, *PutAttributeReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAttribute not implemented")
}
func (UnimplementedOortAdministratorServer) DeleteAttribute(context.Context, *DeleteAttributeReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttribute not implemented")
}
func (UnimplementedOortAdministratorServer) CreatePolicy(context.Context, *CreatePolicyReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedOortAdministratorServer) DeletePolicy(context.Context, *DeletePolicyReq) (*AdministrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedOortAdministratorServer) mustEmbedUnimplementedOortAdministratorServer() {}

// UnsafeOortAdministratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OortAdministratorServer will
// result in compilation errors.
type UnsafeOortAdministratorServer interface {
	mustEmbedUnimplementedOortAdministratorServer()
}

func RegisterOortAdministratorServer(s grpc.ServiceRegistrar, srv OortAdministratorServer) {
	s.RegisterService(&OortAdministrator_ServiceDesc, srv)
}

func _OortAdministrator_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).CreateResource(ctx, req.(*CreateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortAdministrator_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).DeleteResource(ctx, req.(*DeleteResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortAdministrator_CreateInheritanceRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInheritanceRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).CreateInheritanceRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/CreateInheritanceRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).CreateInheritanceRel(ctx, req.(*CreateInheritanceRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortAdministrator_DeleteInheritanceRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInheritanceRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).DeleteInheritanceRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/DeleteInheritanceRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).DeleteInheritanceRel(ctx, req.(*DeleteInheritanceRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortAdministrator_PutAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).PutAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/PutAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).PutAttribute(ctx, req.(*PutAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortAdministrator_DeleteAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).DeleteAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/DeleteAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).DeleteAttribute(ctx, req.(*DeleteAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortAdministrator_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).CreatePolicy(ctx, req.(*CreatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortAdministrator_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortAdministratorServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortAdministrator/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortAdministratorServer).DeletePolicy(ctx, req.(*DeletePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OortAdministrator_ServiceDesc is the grpc.ServiceDesc for OortAdministrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OortAdministrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OortAdministrator",
	HandlerType: (*OortAdministratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _OortAdministrator_CreateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _OortAdministrator_DeleteResource_Handler,
		},
		{
			MethodName: "CreateInheritanceRel",
			Handler:    _OortAdministrator_CreateInheritanceRel_Handler,
		},
		{
			MethodName: "DeleteInheritanceRel",
			Handler:    _OortAdministrator_DeleteInheritanceRel_Handler,
		},
		{
			MethodName: "PutAttribute",
			Handler:    _OortAdministrator_PutAttribute_Handler,
		},
		{
			MethodName: "DeleteAttribute",
			Handler:    _OortAdministrator_DeleteAttribute_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _OortAdministrator_CreatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _OortAdministrator_DeletePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrator.proto",
}

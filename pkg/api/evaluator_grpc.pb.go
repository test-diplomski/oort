// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: evaluator.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OortEvaluatorClient is the client API for OortEvaluator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OortEvaluatorClient interface {
	Authorize(ctx context.Context, in *AuthorizationReq, opts ...grpc.CallOption) (*AuthorizationResp, error)
	GetGrantedPermissions(ctx context.Context, in *GetGrantedPermissionsReq, opts ...grpc.CallOption) (*GetGrantedPermissionsResp, error)
}

type oortEvaluatorClient struct {
	cc grpc.ClientConnInterface
}

func NewOortEvaluatorClient(cc grpc.ClientConnInterface) OortEvaluatorClient {
	return &oortEvaluatorClient{cc}
}

func (c *oortEvaluatorClient) Authorize(ctx context.Context, in *AuthorizationReq, opts ...grpc.CallOption) (*AuthorizationResp, error) {
	out := new(AuthorizationResp)
	err := c.cc.Invoke(ctx, "/proto.OortEvaluator/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oortEvaluatorClient) GetGrantedPermissions(ctx context.Context, in *GetGrantedPermissionsReq, opts ...grpc.CallOption) (*GetGrantedPermissionsResp, error) {
	out := new(GetGrantedPermissionsResp)
	err := c.cc.Invoke(ctx, "/proto.OortEvaluator/GetGrantedPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OortEvaluatorServer is the server API for OortEvaluator service.
// All implementations must embed UnimplementedOortEvaluatorServer
// for forward compatibility
type OortEvaluatorServer interface {
	Authorize(context.Context, *AuthorizationReq) (*AuthorizationResp, error)
	GetGrantedPermissions(context.Context, *GetGrantedPermissionsReq) (*GetGrantedPermissionsResp, error)
	mustEmbedUnimplementedOortEvaluatorServer()
}

// UnimplementedOortEvaluatorServer must be embedded to have forward compatible implementations.
type UnimplementedOortEvaluatorServer struct {
}

func (UnimplementedOortEvaluatorServer) Authorize(context.Context, *AuthorizationReq) (*AuthorizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedOortEvaluatorServer) GetGrantedPermissions(context.Context, *GetGrantedPermissionsReq) (*GetGrantedPermissionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrantedPermissions not implemented")
}
func (UnimplementedOortEvaluatorServer) mustEmbedUnimplementedOortEvaluatorServer() {}

// UnsafeOortEvaluatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OortEvaluatorServer will
// result in compilation errors.
type UnsafeOortEvaluatorServer interface {
	mustEmbedUnimplementedOortEvaluatorServer()
}

func RegisterOortEvaluatorServer(s grpc.ServiceRegistrar, srv OortEvaluatorServer) {
	s.RegisterService(&OortEvaluator_ServiceDesc, srv)
}

func _OortEvaluator_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortEvaluatorServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortEvaluator/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortEvaluatorServer).Authorize(ctx, req.(*AuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OortEvaluator_GetGrantedPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrantedPermissionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OortEvaluatorServer).GetGrantedPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OortEvaluator/GetGrantedPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OortEvaluatorServer).GetGrantedPermissions(ctx, req.(*GetGrantedPermissionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OortEvaluator_ServiceDesc is the grpc.ServiceDesc for OortEvaluator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OortEvaluator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OortEvaluator",
	HandlerType: (*OortEvaluatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _OortEvaluator_Authorize_Handler,
		},
		{
			MethodName: "GetGrantedPermissions",
			Handler:    _OortEvaluator_GetGrantedPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evaluator.proto",
}
